{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "HTML (Nunjucks)",
	"scopeName": "text.html.nunjucks",
	"injections": {
		"L:meta.attribute - (string.quoted.*.html string.unquoted.html)": {
			"patterns": [
				{
					"include": "#tag-comment"
				},
				{
					"include": "#tags-nunjucks"
				}
			]
		},
		"R:text.html - (comment.block, text.html meta.embedded, meta.tag.*.*.html, meta.tag.*.*.*.html, meta.tag.*.*.*.*.html)": {
			"comment": "Uses R: to ensure this matches after any other injections.",
			"patterns": [
				{
					"include": "#tag-comment"
				},
				{
					"match": "<",
					"name": "invalid.illegal.bad-angle-bracket.html"
				}
			]
		}
	},
	"patterns": [
		{
			"include": "text.html.basic#xml-processing"
		},
		{
			"include": "text.html.basic#comment"
		},
		{
			"include": "text.html.basic#doctype"
		},
		{
			"include": "text.html.basic#cdata"
		},
		{
			"include": "#tag-comment"
		},
		{
			"include": "#tags-nunjucks"
		},
		{
			"include": "text.html.basic#tags-valid"
		},
		{
			"include": "text.html.basic#tags-invalid"
		},
		{
			"include": "text.html.basic#entities"
		}
	],
	"repository": {
		"tags-nunjucks": {
			"patterns": [
				{
					"include": "#tag-raw"
				},
				{
					"include": "#tag-control-flow"
				},
				{
					"include": "#tag-variable"
				}
			]
		},
		"tag-comment": {
			"patterns": [
				{
					"begin": "{#",
					"end": "#}",
					"name": "comment.block.nunjucks"
				}
			]
		},
		"tag-control-flow": {
			"begin": "({%-?(?!-|%))(?:\\s*(autoescape|endautoescape|block|endblock|blocktrans|endblocktrans|trans|plural|debug|extends|filter|firstof|for|empty|endfor|if|elif|else|elseif|endif|include|ifchanged|endifchanged|ifequal|endifequal|ifnotequal|endifnotequal|load|from|low|regroup|ssi|spaceless|endspaceless|templatetag|widthratio|with|endwith|csrf_token|cycle|url|lorem|thumbnail|endthumbnail|get_static_prefix|macro|endmacro)\\b)?",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.tag.begin.nunjucks"
				},
				"2": {
					"name": "keyword.control.nunjucks"
				}
			},
			"end": "(?<!%|-)-?%}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.tag.end.nunjucks"
				}
			},
			"name": "meta.tag.control-flow.nunjucks",
			"patterns": [
				{
					"include": "#tag-control-flow-keywords"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#tag-variable-filter"
				}
			]
		},
		"tag-control-flow-keywords": {
			"patterns": [
				{
					"match": "\\b(and|or|not)\\b",
					"name": "keyword.operator.logical.nunjucks"
				},
				{
					"match": "\\b(by|as)\\b",
					"name": "keyword.operator.expression.nunjucks"
				},
				{
					"match": "\\b(in)\\b",
					"name": "keyword.operator.expression.in.nunjucks"
				}
			]
		},
		"tag-variable": {
			"patterns": [
				{
					"begin": "{{-?(?!-|})",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.tag.begin.nunjucks"
						}
					},
					"end": "(?<!{|-)-?}}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.tag.end.nunjucks"
						}
					},
					"name": "meta.tag.variable.nunjucks",
					"patterns": [
						{
							"include": "#tag-variable-filter"
						}
					]
				}
			]
		},
		"tag-variable-filter": {
			"patterns": [
				{
					"include": "#function-call-innards"
				},
				{
					"match": "\\b(add|addslashes|capfirst|center|cut|date|default|default_if_none|dictsort|dictsortreversed|divisibleby|escape|escapejs|filesizeformat|first|fix_ampersands|floatformat|force_escape|get_digit|iriencode|join|last|length|length_is|linebreaks|linebreaksbr|linenumbers|ljust|lower|make_list|phone2numeric|pluralize|pprint|random|removetags|rjust|safe|safeseq|slice|slugify|stringformat|striptags|time|timesince|timeutil|title|truncatewords|truncatewords_html|unordered_list|upper|urlencode|urlize|urlizetrunc|wordcount|wordwrap|yesno|apnumber|intcomma|intword|naturalday|ordinal|STATIC_PREFIX)\\b",
					"name": "keyword.control.filter.nunjucks"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#literal-string"
				},
				{
					"include": "#literal-numeric"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#expressionPunctuations"
				},
				{
					"include": "#punctuation-colon"
				}
			]
		},
		"literal-string": {
			"patterns": [
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double"
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.comparison.nunjucks",
					"match": "===|!==|==|!="
				},
				{
					"name": "keyword.operator.relational.nunjucks",
					"match": "<=|>=|<>|<|>"
				},
				{
					"name": "keyword.operator.assignment.nunjucks",
					"match": "\\="
				}
			]
		},
		"expressionPunctuations": {
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-accessor"
				}
			]
		},
		"punctuation-comma": {
			"match": ",",
			"name": "punctuation.separator.comma.nunjucks"
		},
		"punctuation-colon": {
			"match": ":",
			"name": "punctuation.separator.colon.nunjucks"
		},
		"punctuation-accessor": {
			"match": "\\.",
			"name": "punctuation.accessor.nunjucks"
		},
		"array-accessor": {
			"patterns": [
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "meta.brackets.square.nunjucks"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "meta.brackets.square.nunjucks"
						}
					},
					"patterns": [
						{
							"include": "#literal-numeric"
						}
					]
				}]
		},
		"literal-numeric": {
			"patterns": [
				{
					"match": "\\b(?:[0-9]*\\.)?[0-9]+\\b",
					"name": "constant.numeric.decimal.nunjucks"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"begin": "(\\b[A-Za-z_][A-Za-z0-9_]*\\b)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.nunjucks"
						},
						"2": {
							"name": "meta.brace.round.nunjucks"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.nunjucks"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#expression"
				},
				{
					"match": "\\|",
					"name": "string.unquoted.filter-pipe.nunjucks"
				},
				{
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
					"name": "variable.other.readwrite"
				}
			]
		},
		"tag-raw": {
			"__comment": "TODO: Figure out a way to deâ€‘duplicate these two",
			"patterns": [
				{
					"begin": "({%-?(?!-|%))\\s*(raw)\\s*((?<!%|-)-?%})",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.begin.nunjucks"
						},
						"2": {
							"name": "keyword.control.nunjucks"
						},
						"3": {
							"name": "punctuation.definition.tag.end.nunjucks"
						}
					},
					"end": "({%-?(?!-|%))\\s*(endraw)\\s*((?<!%|-)-?%})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.tag.begin.nunjucks"
						},
						"2": {
							"name": "keyword.control.nunjucks"
						},
						"3": {
							"name": "punctuation.definition.tag.end.nunjucks"
						}
					},
					"patterns": [
						{
							"include": "text.html.basic#xml-processing"
						},
						{
							"include": "text.html.basic#comment"
						},
						{
							"include": "text.html.basic#doctype"
						},
						{
							"include": "text.html.basic#cdata"
						},
						{
							"include": "text.html.basic#tags-valid"
						},
						{
							"include": "text.html.basic#tags-invalid"
						},
						{
							"include": "text.html.basic#entities"
						}
					]
				},
				{
					"begin": "({%-?(?!-|%))\\s*(verbatim)\\s*((?<!%|-)-?%})",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.begin.nunjucks"
						},
						"2": {
							"name": "keyword.control.nunjucks"
						},
						"3": {
							"name": "punctuation.definition.tag.end.nunjucks"
						}
					},
					"end": "({%-?(?!-|%))\\s*(endverbatim)\\s*((?<!%|-)-?%})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.tag.begin.nunjucks"
						},
						"2": {
							"name": "keyword.control.nunjucks"
						},
						"3": {
							"name": "punctuation.definition.tag.end.nunjucks"
						}
					},
					"patterns": [
						{
							"include": "text.html.basic#xml-processing"
						},
						{
							"include": "text.html.basic#comment"
						},
						{
							"include": "text.html.basic#doctype"
						},
						{
							"include": "text.html.basic#cdata"
						},
						{
							"include": "text.html.basic#tags-valid"
						},
						{
							"include": "text.html.basic#tags-invalid"
						},
						{
							"include": "text.html.basic#entities"
						}
					]
				}
			]
		}
	}
}
